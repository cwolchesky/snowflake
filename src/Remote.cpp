/*
* snowflake - An IoT controller for an AC using an Arduino-based device
* Copyright (C) 2017 Chris Wolchesky
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include <Remote.h>
#include <IRLibSendBase.h>
#include <IRLib_HashRaw.h>

void Remote::powerButton(void) {
  uint16_t rawData[RAW_DATA_LEN]={
  	8846, 4534, 542, 570, 542, 566, 542, 570,
  	542, 1714, 518, 566, 546, 566, 546, 566,
  	542, 566, 546, 1714, 518, 566, 542, 1686,
  	546, 566, 542, 1690, 542, 1686, 542, 1690,
  	542, 1686, 542, 1686, 546, 566, 542, 570,
  	542, 566, 546, 1686, 542, 570, 542, 566,
  	546, 566, 546, 566, 542, 1690, 542, 1686,
  	542, 1686, 546, 566, 542, 1690, 542, 1686,
  	542, 1678, 546, 1000};

  this.IRSender.send(rawData, RAW_DATA_LEN, 36);
}

void Remote::powerButton(void) {
  uint16_t rawData[RAW_DATA_LEN]={
  	8830, 4538, 494, 598, 510, 598, 514, 598,
  	514, 1738, 494, 598, 510, 598, 514, 598,
  	514, 598, 510, 1742, 490, 602, 506, 1742,
  	490, 626, 486, 1738, 490, 1742, 486, 1742,
  	490, 1742, 486, 1742, 490, 626, 486, 626,
  	486, 1742, 486, 626, 486, 626, 486, 626,
  	482, 630, 482, 630, 482, 1742, 486, 1742,
  	490, 630, 482, 1742, 486, 1742, 490, 1742,
  	486, 1734, 490, 1000};

  this.IRSender.send(rawData, RAW_DATA_LEN, 36);
}

void Remote::energySaverMode(void) {
  uint16_t rawData[RAW_DATA_LEN]={
    8902, 4490, 538, 574, 538, 570, 538, 574,
  	538, 1714, 514, 574, 538, 574, 538, 574,
  	538, 570, 538, 1718, 514, 574, 538, 1714,
  	514, 574, 538, 1714, 494, 1734, 494, 1738,
  	490, 1738, 514, 578, 510, 1742, 514, 574,
  	514, 598, 534, 574, 514, 598, 514, 598,
  	510, 598, 518, 1734, 494, 598, 518, 1734,
  	490, 1738, 490, 1738, 494, 1738, 490, 1738,
  	494, 1730, 490, 1000};

  this.IRSender.send(rawData, RAW_DATA_LEN, 36);
}

void Remote::fanOnlyMode(void) {
  uint16_t rawData[RAW_DATA_LEN]={
    8906, 4482, 546, 570, 542, 570, 542, 566,
  	546, 1686, 542, 570, 542, 566, 546, 566,
  	546, 566, 542, 1690, 514, 594, 546, 1690,
  	538, 570, 542, 1686, 542, 1670, 546, 1682,
  	562, 1666, 542, 1690, 538, 1690, 562, 1670,
  	562, 570, 542, 570, 542, 570, 542, 566,
  	542, 570, 542, 570, 542, 570, 542, 570,
  	542, 1666, 538, 1690, 542, 1690, 562, 1666,
  	562, 1662, 538, 1000};

  this.IRSender.send(rawData, RAW_DATA_LEN, 36);
}

void Remote::sleepButton(void) {
  uint16_t rawData[RAW_DATA_LEN]={
    8802, 4542, 490, 630, 482, 630, 482, 626,
  	486, 1742, 486, 630, 482, 630, 482, 626,
  	486, 626, 486, 1742, 486, 630, 482, 1742,
  	490, 626, 482, 1746, 486, 1742, 490, 1742,
  	486, 1742, 490, 626, 486, 626, 482, 630,
  	482, 630, 482, 626, 486, 626, 486, 626,
  	486, 626, 486, 1738, 490, 1742, 486, 1746,
  	486, 1742, 490, 1742, 486, 1742, 490, 1742,
  	486, 1734, 490, 1000};

  this.IRSender.send(rawData, RAW_DATA_LEN, 36);
}

void Remote::autoFanMode(void) {
  uint16_t rawData[RAW_DATA_LEN]={
    8878, 4534, 490, 626, 482, 630, 482, 630,
  	482, 1742, 486, 630, 482, 630, 482, 630,
  	482, 630, 482, 1742, 486, 630, 482, 1742,
  	490, 626, 486, 1742, 486, 1746, 486, 1742,
  	486, 1746, 486, 1742, 490, 1742, 486, 1742,
  	490, 1742, 486, 630, 482, 626, 486, 630,
  	482, 626, 482, 630, 482, 630, 482, 626,
  	486, 626, 486, 1742, 486, 1742, 490, 1742,
  	486, 1738, 486, 1000};

  this.IRSender.send(rawData, RAW_DATA_LEN, 36);
}

void Remote::timerButton(void) {
  uint16_t rawData[RAW_DATA_LEN]={
    8878, 4534, 486, 630, 482, 630, 482, 630,
  	482, 1742, 490, 626, 482, 630, 482, 630,
  	482, 630, 482, 1742, 486, 630, 482, 1742,
  	490, 630, 482, 1742, 486, 1742, 490, 1746,
  	486, 1742, 486, 630, 482, 1742, 486, 1746,
  	486, 630, 482, 630, 482, 626, 486, 626,
  	482, 630, 482, 1746, 486, 630, 482, 630,
  	482, 1742, 486, 1746, 486, 1742, 490, 1742,
  	486, 1738, 486, 1000};

  this.IRSender.send(rawData, RAW_DATA_LEN, 36);
}

void Remote::fanDown(void) {
  uint16_t rawData[RAW_DATA_LEN]={
    8926, 4498, 534, 598, 514, 598, 514, 598,
  	514, 1694, 538, 594, 518, 594, 518, 594,
  	518, 594, 514, 1694, 538, 594, 518, 1690,
  	538, 594, 518, 1694, 538, 1690, 538, 1694,
  	538, 1690, 542, 594, 534, 578, 518, 1690,
  	538, 594, 518, 594, 518, 594, 518, 594,
  	518, 594, 518, 1690, 538, 1690, 542, 594,
  	526, 1682, 538, 1694, 538, 1690, 542, 1690,
  	538, 1606, 618, 1000};

  this.IRSender.send(rawData, RAW_DATA_LEN, 36);
}

void Remote::fanUp(void) {
  uint16_t rawData[RAW_DATA_LEN]={
    8910, 4542, 494, 598, 514, 598, 514, 598,
  	514, 1738, 490, 602, 510, 598, 514, 598,
  	514, 598, 514, 1738, 490, 602, 510, 1742,
  	490, 598, 514, 1738, 490, 1742, 490, 1742,
  	490, 1738, 494, 1738, 490, 602, 510, 598,
  	514, 598, 514, 598, 514, 598, 514, 598,
  	514, 598, 514, 598, 510, 1742, 490, 1738,
  	494, 1738, 490, 1742, 490, 1738, 494, 1738,
  	490, 1734, 490, 1000};

  this.IRSender.send(rawData, RAW_DATA_LEN, 36);
}

void Remote::tempUp(void) {
  uint16_t rawData[RAW_DATA_LEN]={
    8854, 4554, 490, 630, 482, 654, 458, 630,
  	482, 1742, 486, 630, 482, 630, 482, 630,
  	482, 654, 458, 1742, 486, 634, 478, 1742,
  	490, 654, 458, 1742, 486, 1742, 490, 1742,
  	490, 1742, 486, 630, 482, 1742, 490, 1742,
  	486, 1742, 490, 654, 458, 630, 482, 654,
  	458, 626, 482, 1746, 486, 630, 482, 630,
  	482, 654, 458, 1742, 486, 1742, 490, 1742,
  	490, 1734, 486, 1000};

  this.IRSender.send(rawData, RAW_DATA_LEN, 36);
}

void Remote::tempDown(void) {
  uint16_t rawData[RAW_DATA_LEN]={
    8850, 4534, 550, 562, 550, 562, 550, 562,
  	550, 1686, 542, 566, 550, 562, 550, 562,
  	550, 558, 554, 1682, 546, 562, 550, 1686,
  	542, 562, 554, 1682, 542, 1690, 542, 1686,
  	546, 1686, 542, 1686, 546, 562, 554, 1682,
  	546, 1686, 542, 562, 550, 562, 554, 558,
  	550, 562, 550, 562, 550, 1686, 542, 562,
  	554, 558, 550, 1686, 546, 1682, 546, 1686,
  	542, 1682, 542, 1000};

  this.IRSender.send(rawData, RAW_DATA_LEN, 36);
}
